@page "/authors/delete/{Id}"
@attribute [Authorize(Roles = "Administrator")]
@inject IAuthorRepository repo
@inject NavigationManager NavManager

<h3 class="card-title">Are you sure you want to delete this record?</h3>
<hr/>
<br/>
@if (!isSuccess)
{
    <ErrorMessage Message="Somewthing Went Wrong WIth the Operation" />
}

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please Try Again" />
}
else if (_model == null)
{
	<LoadingMessage Message="Loading Author for edit" />
}
else
{
	<div class="col-md-4">
		<table class=" table table-responsive">
			<tr>
				<td>First Name</td>
				<td>@_model.Firstname</td>
			</tr>
			<tr>
				<td>Last Name</td>
				<td>@_model.Lastname</td>
			</tr>
			<tr>
				<td>Biography</td>
				<td>@_model.Bio</td>
			</tr>
		</table>
		<br />
		@if (_model.Books == null || !_model.Books.Any())
		{
			<div class="alert alert-dismissible alert-secondary">
				No books for this author
			</div>
		}
		else
		{
			<div class="card" style="width: 18rem;">
				<div class="card-header">
					Author's Books
				</div>
				<ul class="list-group list-group-flush">
					@foreach (var book in _model.Books)
					{
						<li class="list-group-item">@book.Title - @book.Price</li>
					}
				</ul>
			</div>
		}
	</div>
	<br />

	<button @onclick="DeleteAuthor" class="btn btn-danger">
		<span class="oi oi-delete"></span>
		Delete Author
	</button>
	<button @onclick="BackToList" class="btn btn-outline-secondary">
		<span class="oi oi-media-skip-backward"></span>
		Back to list
	</button>
}

@code {

	[Parameter]
	public string Id { get; set; }

	private Author _model = new Author();
    private bool isSuccess = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var id = Convert.ToInt32(Id);
			_model = await repo.Get(Endpoints.AuthorsEndpoint, id);

			StateHasChanged();
		}
	}

	private async Task DeleteAuthor()
	{
		isSuccess = await repo.Delete(Endpoints.AuthorsEndpoint, _model.Id);
		if (isSuccess)
		{
            _toastService.ShowError("Author Deleted Successfully", "");
			BackToList();
		}
		else
		{
			_isFailed = true;
		}
	}

	private void BackToList() => NavManager.NavigateTo("/authors/");
}