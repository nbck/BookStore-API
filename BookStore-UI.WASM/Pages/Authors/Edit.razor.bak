@page "/authors/edit/{Id}"
@attribute [Authorize(Roles = "Administrator")]
@inject IAuthorRepository repo
@inject NavigationManager NavManager
@inject IToastService _toastService

<h3 class="card-title">Edit Author</h3>
<hr />
<br />
@if (!isSuccess)
{
    <ErrorMessage Message="Somewthing Went Wrong With the Operation" />
}

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please Try Again" />
}
else if  (Model == null)
{
	<LoadingMessage Message="Loading Author for edit" />
}
else
{
	<EditForm Model="Model" OnValidSubmit="EditAuthor">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="form-group">
			<label for="firstname">First Name</label>
			<InputText @bind-Value="Model.Firstname" class="form-control" id="firstname" />
		</div>
		<div class="form-group">
			<label for="lastname">Last Name</label>
			<InputText @bind-Value="Model.Lastname" class="form-control" id="lastname" />
		</div>
		<div class="form-group">
			<label for="bio">Biography</label>
			<InputTextArea @bind-Value="Model.Bio" class="form-control" id="bio" />
		</div>
		<button class="btn btn-primary" type="submit">
			<span class="oi oi-pencil></span>
			Submit changes
		</button>
		<button @onclick="BackToList" class="btn btn-outline-secondary">
			<span class="oi oi-media-skip-backward"></span>
			Back to list
		</button>
	</EditForm>
}

@code {

	[Parameter]
	public string Id { get; set; }

	private Author Model;
    private bool isSuccess = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var id = Convert.ToInt32(Id);
			Model = await repo.Get(Endpoints.AuthorsEndpoint, id);

			StateHasChanged();
		}
	}

	private async Task EditAuthor()
	{
		var isSuccess = await repo.Update(Endpoints.AuthorsEndpoint, Model, Model.Id);
		if (isSuccess)
		{
            _toastService.ShowWarning("Author Updated Successfully", "");
			BackToList();
		}
	}

	private void BackToList()
	{
		NavManager.NavigateTo("/authors/");
	}

}