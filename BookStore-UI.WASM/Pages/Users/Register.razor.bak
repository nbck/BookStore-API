@page "/Register"
@inject IAuthenticationRepository authRepo;
@inject NavigationManager navMan;
<h3 class="card-title">Register Now</h3>
<hr />
<br />

@if (isFailed)
{
	<ErrorMessage Message="Something went wrong with the registration attempt" />
}
<EditForm Model="Model" OnValidSubmit="HandleRegistration">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-group">
		<label for="email">Email address</label>
		<InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress" />
		<ValidationMessage For="@(() => Model.EmailAddress)" />
	</div>
	<div class="form-group">
		<label for="password">Password</label>
		<InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
		<ValidationMessage For="@(() => Model.Password)" />
	</div>
	<div class="form-group">
		<label for="confirmpassword">Confirm password</label>
		<InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword" />
		<ValidationMessage For="@(() => Model.ConfirmPassword)" />
	</div>
	<button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
	private readonly RegistrationModel Model = new RegistrationModel();
	private bool isFailed;

	private async Task HandleRegistration()
	{
		var response = await authRepo.Register(Model);
		if (response)
		{
			navMan.NavigateTo("/");
		}
		else
		{
			isFailed = true;
		}
	}

}