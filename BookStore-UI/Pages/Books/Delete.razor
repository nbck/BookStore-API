@page "/books/delete/{Id}"
@attribute [Authorize(Roles = "Administrator")]
@inject IBookRepository Repo
@inject IFileUpload FileUpload
@inject IToastService ToastService
@inject NavigationManager NavManager

<h3 class="card-title">Are you sure you want to delete this record?</h3>
<hr />
<br />

@if (_isFailed)
{
	<ErrorMessage Message="Something went wrong with the operation" />
}

@if (string.IsNullOrWhiteSpace(Id) || int.Parse(Id) < 1)
{
	<ErrorMessage Message="Invalid selection. Pleae try again" />
}
else if (_model == null)
{
	<LoadingMessage Message="Loading Book details" />
}
else
{
	<div class="row">
		<div class="col-md-6">
			<table class=" table table-responsive">
				<tr>
					<td>
						<strong>Title</strong>
					</td>
					<td>@_model.Title</td>
				</tr>
				<tr>
					<td>
						<strong>Author</strong>
					</td>
					<td>
						@if (_model.Author == null)
						{
							<span class="text-muted">No Author recorded</span>
						}
						else
						{
							<a href="/authors/view/@_model.AuthorId">@_model.Author.Firstname @_model.Author.Lastname</a>
						}
					</td>
				</tr>
				<tr>
					<td>
						<strong>summary</strong>
					</td>
					<td>
						@_model.Summary
					</td>
				</tr>
				<tr>
					<td>
						<strong>Published Year</strong>
					</td>
					<td>@_model.Year</td>
				</tr>
				<tr>
					<td>
						<strong>ISBN</strong>
					</td>
					<td>@_model.Isbn</td>
				</tr>
			</table>
		</div>

		<div class="col-md-4">
			<img src="uploads/@_model.ImageName" style="height: 300px; width: 300px" alt="" />
			<h3 class="text-center text-info">@_model.Price</h3>
		</div>
	</div>

	<br />

	<button @onclick="DeleteBook" class="btn btn-danger" type="submit">
		<span class="oi oi-delete"></span>
		Delete Book
	</button>
	<button @onclick="BackToList" class="btn btn-outline-secondary">
		<span class="oi oi-media-skip-backward"></span>
		Back to list
	</button>
}

@code {
	[Parameter]
	public string Id { get; set; }

	private Book _model;
	private bool _isFailed;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var id = Convert.ToInt32(Id);
			_model = await Repo.Get(Endpoints.BooksEndpoint, id);

			StateHasChanged();
		}
	}

	private async Task DeleteBook()
	{
		FileUpload.RemoveFile(_model.ImageName);
		var isSuccess = await Repo.Delete(Endpoints.BooksEndpoint, _model.Id);
		if (isSuccess)
		{
			ToastService.ShowInfo($"Book '{_model.Title} ({_model.Year})' deleted successfully", "A book was deleted!");
			BackToList();
		}
		else
		{
			_isFailed = true;
		}
	}

	private void BackToList() => NavManager.NavigateTo("/books/");
}