@page "/books/view/{Id}"

@inject IBookRepository Repo

<h3 class="card-title">View Book details</h3>
<hr/>
<br/>

@if (string.IsNullOrWhiteSpace(Id) || int.Parse(Id) < 1)
{
	<ErrorMessage Message="Invalid selection. Pleae trye again"/>
}
else if (_model == null)
{
	<LoadingMessage Message="Loading Book details"/>
}
else
{
	<div class="row">
		<div class="col-md-6">
			<table class=" table table-responsive">
				<tr>
					<td>
						<strong>Title</strong>
					</td>
					<td>@_model.Title</td>
				</tr>
				<tr>
					<td>
						<strong>Author</strong>
					</td>
					<td>
						@if (_model.Author == null)
						{
							<span class="text-muted">No Author recorded</span>
						}
						else
						{
							<a href="/authors/view/@_model.AuthorId">@_model.Author.Firstname @_model.Author.Lastname</a>
						}
					</td>
				</tr>
				<tr>
					<td>
						<strong>summary</strong>
					</td>
					<td>
						@_model.Summary
					</td>
				</tr>
				<tr>
					<td>
						<strong>Published Year</strong>
					</td>
					<td>@_model.Year</td>
				</tr>
				<tr>
					<td>
						<strong>ISBN</strong>
					</td>
					<td>@_model.Isbn</td>
				</tr>
			</table>
		</div>

		<div class="col-md-4">
			<img src="uploads/@_model.ImageName" style="height: 300px; width: 300px" alt=""/>
			<h3 class="text-center text-info">@($"{_model.Price:C}")</h3>
		</div>
	</div>
}
<br/>

<AuthorizeView Roles="Administrator">
	<a href="/books/edit/@Id" class="btn btn-outline-warning">
		<span class="oi oi-pencil"></span>
		Edit Book
	</a>
	<a href="/books/delete/@Id" class="btn btn-outline-danger">
		<span class="oi oi-circle-x"></span>
		Delete Book
	</a>
</AuthorizeView>
<a href="/books/" class="btn btn-outline-secondary">
	<span class="oi oi-media-skip-backward"></span>
	Back to list
</a>
<br/>

@code {

	[Parameter]
	public string Id { get; set; }

	private Book _model = new Book();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var id = Convert.ToInt32(Id);
			_model = await Repo.Get(Endpoints.BooksEndpoint, id);

			StateHasChanged();
		}
	}
}