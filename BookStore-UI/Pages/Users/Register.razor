@page "/Register"

@using BookStore_UI.Contracts
@using BookStore_UI.Models

@inject IAuthenticationRepository authRepo;
@inject NavigationManager navMan;

<div class="card">
    <h3 class="card-title">Register Now</h3>
    @if (isFailed)
    {
        <div class="aler alert-danger">
            <p>Something went wrong</p>
        </div>
    }
    <div class="card-body">
        <EditForm Model="Model" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress"/>
                <ValidationMessage For="@(() => Model.EmailAddress)"/>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password"/>
                <ValidationMessage For="@(() => Model.Password)"/>
            </div>
            <div class="form-group">
                <label for="confirmpassword">Confirm password</label>
                <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword"/>
                <ValidationMessage For="@(() => Model.ConfirmPassword)"/>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

@code {
    private readonly RegistrationModel Model = new RegistrationModel();
    private bool isFailed = false;
    
    private async Task HandleRegistration()
    {
        var response = await this.authRepo.Register(this.Model);
        if (response)
        {
            this.navMan.NavigateTo("/");
        }
        else
        {
            isFailed = true;
        }
    }
}